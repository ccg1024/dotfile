---- see :h nvim-lsp-installer-quickstart
--require("nvim-lsp-installer").setup{}
---- require("lsp.lua")
---- require("lsp.python")

--local lspconfig = require("lspconfig")

--local function on_attach(client, bufnr) -- set up buffer keymaps, etc.
--  -- Enable completion triggered by <c-x><c-o>
--  --vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

--  -- Mappings.
--  -- See `:help vim.lsp.*` for documentation on any of the below functions
--  local bufopts = { noremap=true, silent=true, buffer=bufnr }
--  vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
--  vim.keymap.set('n', 'gd', vim.lsp.buf.definition, bufopts)
--  vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
--  --vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
--  --vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, bufopts)
--  --vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, bufopts)
--  --vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, bufopts)
--  --vim.keymap.set('n', '<space>wl', function()
--  --  print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
--  --end, bufopts)
--  vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, bufopts)
--  vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, bufopts)
--  --vim.keymap.set('n', '<space>ca', vim.lsp.buf.code_action, bufopts)
--  vim.keymap.set('n', 'gr', vim.lsp.buf.references, bufopts)
--  -- vim.keymap.set('n', '<space>f', vim.lsp.buf.formatting, bufopts)
--end

--local lsp_flags = {
--  -- This is the default in Nvim 0.7+
--  debounce_text_changes = 150,
--}

----===============
----===============
---- Setup nvim-cmp.

----   פּ ﯟ   some other good icons
--local kind_icons = {
--  Text = "",
--  Method = "m",
--  Function = "",
--  Constructor = "",
--  Field = "",
--  Variable = "",
--  Class = "",
--  Interface = "",
--  Module = "",
--  Property = "",
--  Unit = "",
--  Value = "",
--  Enum = "",
--  Keyword = "",
--  Snippet = "",
--  Color = "",
--  File = "",
--  Reference = "",
--  Folder = "",
--  EnumMember = "",
--  Constant = "",
--  Struct = "",
--  Event = "",
--  Operator = "",
--  TypeParameter = "",
--}
---- find more here: https://www.nerdfonts.com/cheat-sheet

--local t = function(str)
--    return vim.api.nvim_replace_termcodes(str, true, true, true)
--end
--local cmp = require('cmp')

--cmp.setup{
--  snippet = {
--    expand = function(args)
--      vim.fn["UltiSnips#Anon"](args.body)
--    end,
--  },
--  window = {
--    completion = cmp.config.window.bordered(),
--    documentation = cmp.config.window.bordered(),
--  },
--  mapping = {
--    ["<Tab>"] = cmp.mapping({
--      c = function()
--        if cmp.visible() then
--          cmp.select_next_item({ behavior = cmp.SelectBehavior.Insert })
--        else
--          cmp.complete()
--        end
--      end,
--      i = function(fallback)
--        if cmp.visible() then
--          cmp.select_next_item({ behavior = cmp.SelectBehavior.Insert })
--        elseif vim.fn["UltiSnips#CanJumpForwards"]() == 1 then
--          vim.api.nvim_feedkeys(t("<Plug>(ultisnips_jump_forward)"), 'm', true)
--        else
--          fallback()
--        end
--      end,
--      s = function(fallback)
--        if vim.fn["UltiSnips#CanJumpForwards"]() == 1 then
--          vim.api.nvim_feedkeys(t("<Plug>(ultisnips_jump_forward)"), 'm', true)
--        else
--          fallback()
--        end
--      end
--    }),
--    ["<S-Tab>"] = cmp.mapping({
--      c = function()
--        if cmp.visible() then
--          cmp.select_prev_item({ behavior = cmp.SelectBehavior.Insert })
--        else
--          cmp.complete()
--        end
--      end,
--      i = function(fallback)
--        if cmp.visible() then
--          cmp.select_prev_item({ behavior = cmp.SelectBehavior.Insert })
--        elseif vim.fn["UltiSnips#CanJumpBackwards"]() == 1 then
--          return vim.api.nvim_feedkeys( t("<Plug>(ultisnips_jump_backward)"), 'm', true)
--        else
--          fallback()
--        end
--      end,
--      s = function(fallback)
--        if vim.fn["UltiSnips#CanJumpBackwards"]() == 1 then
--          return vim.api.nvim_feedkeys( t("<Plug>(ultisnips_jump_backward)"), 'm', true)
--        else
--          fallback()
--        end
--      end
--    }),
--    ['<Down>'] = cmp.mapping(cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Select }), {'i'}),
--    ['<Up>'] = cmp.mapping(cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Select }), {'i'}),
--    ['<C-n>'] = cmp.mapping({
--      c = function()
--        if cmp.visible() then
--          cmp.select_next_item({ behavior = cmp.SelectBehavior.Select })
--        else
--          vim.api.nvim_feedkeys(t('<Down>'), 'n', true)
--        end
--      end,
--      i = function(fallback)
--        if cmp.visible() then
--          cmp.select_next_item({ behavior = cmp.SelectBehavior.Select })
--        else
--          fallback()
--        end
--      end
--    }),
--    ['<C-p>'] = cmp.mapping({
--      c = function()
--        if cmp.visible() then
--          cmp.select_prev_item({ behavior = cmp.SelectBehavior.Select })
--        else
--          vim.api.nvim_feedkeys(t('<Up>'), 'n', true)
--        end
--      end,
--      i = function(fallback)
--        if cmp.visible() then
--          cmp.select_prev_item({ behavior = cmp.SelectBehavior.Select })
--        else
--          fallback()
--        end
--      end
--    }),
--    ['<C-b>'] = cmp.mapping(cmp.mapping.scroll_docs(-4), {'i', 'c'}),
--    ['<C-f>'] = cmp.mapping(cmp.mapping.scroll_docs(4), {'i', 'c'}),
--    --['<C-e>'] = cmp.mapping(cmp.mapping.complete(), {'i', 'c'}),
--    --['<C-e>'] = cmp.mapping({ i = cmp.mapping.close(), c = cmp.mapping.close() }),
--    ['<CR>'] = cmp.mapping({
--      i = cmp.mapping.confirm({ behavior = cmp.ConfirmBehavior.Replace, select = true }),
--      c = function(fallback)
--        if cmp.visible() then
--          cmp.confirm({ behavior = cmp.ConfirmBehavior.Replace, select = true})
--        else
--          fallback()
--        end
--      end
--    }),
--  },

--  formatting = {
--    fields = { "kind", "abbr", "menu" },
--    format = function(entry, vim_item)
--      -- Kind icons
--      vim_item.kind = string.format("%s", kind_icons[vim_item.kind])
--      vim_item.menu = ({
--        nvim_lsp = "[LSP]",
--        ultisnips = "[Snippet]",
--        buffer = "[Buffer]",
--        path = "[Path]",
--      })[entry.source.name]
--      return vim_item
--    end,
--  },

--  sources = cmp.config.sources({
--    { name = 'nvim_lsp' },
--    { name = 'ultisnips' },
--  }, {
--    { name = 'buffer' },
--    { name = 'path' },
--  })
--}

---- Set configuration for specific filetype.
--cmp.setup.filetype('gitcommit', {
--  sources = cmp.config.sources({
--    { name = 'cmp_git' }, -- You can specify the `cmp_git` source if you were installed it.
--  }, {
--    { name = 'buffer' },
--  })
--})

---- Use buffer source foj `/` (if you enabled `native_menu`, this won't work anymore).
--cmp.setup.cmdline('/', {
--  completion = { autocomplete = false },
--  sources = {
--    -- { name = 'buffer' }
--    { name = 'buffer', opts = { keyword_pattern = [=[[^[:blank:]].*]=] } }
--  }
--})

---- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
--cmp.setup.cmdline(':', {
--  completion = { autocomplete = false },
--  sources = cmp.config.sources({
--    { name = 'path' }
--  }, {
--    { name = 'cmdline' }
--  })
--})

---- Setup lspconfig.
--local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())

---- connect nvim-cmp & lspconfig
--lspconfig.sumneko_lua.setup {
--  on_attach = on_attach,
--  flags = lsp_flags,
--  capabilities = capabilities,
--  settings = {
--    Lua = {
--      runtime = {
--        version = 'LuaJIT',
--      },
--      diagnostics = {
--        globals = {"vim", "packer_bootstrap"},
--      },
--      workspace = {
--        library = vim.api.nvim_get_runtime_file("", true),
--      },
--      telemetry = {
--        enable = false,
--      },
--    },
--  },
--}
--lspconfig.pyright.setup {
--  on_attach = on_attach,
--  flags = lsp_flags,
--  capabilities = capabilities,
--  settings = {
--    python = {
--      analysis = {
--        autoSearchPaths = true,
--        diagnosticMode = "workspace",
--        useLibraryCodeForTypes = true
--      }
--    }
--  },
--}

--lspconfig.jdtls.setup {
--  on_attach = on_attach,
--  flags = lsp_flags,
--  capabilities = capabilities,
--}

--require("lsp.handlers").setup()
